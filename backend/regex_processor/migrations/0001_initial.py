# Generated by Django 5.2.6 on 2025-09-24 04:50

import django.core.files.storage
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="FileProcessingRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "natural_language_description",
                    models.TextField(
                        help_text="User described requirements, such as: format all phone numbers as xxx-xxxx-xxxx",
                        verbose_name="Natural language description",
                    ),
                ),
                (
                    "replacement_value",
                    models.TextField(
                        help_text="Target format or content for replacement", verbose_name="Replacement value"
                    ),
                ),
                (
                    "original_file_name",
                    models.CharField(max_length=255, verbose_name="Original file name"),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV file"),
                            ("excel", "Excel file"),
                            ("xlsx", "Excel 2007+"),
                            ("xls", "Excel 97-2003"),
                        ],
                        max_length=10,
                        verbose_name="File type",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(verbose_name="File size (bytes)"),
                ),
                (
                    "original_file",
                    models.FileField(
                        help_text="Uploaded original file",
                        storage=django.core.files.storage.FileSystemStorage(
                            location="media/processed_files/"
                        ),
                        upload_to="original_files/",
                        verbose_name="Original file",
                    ),
                ),
                (
                    "current_file",
                    models.FileField(
                        blank=True,
                        help_text="Currently processing file",
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="media/processed_files/"
                        ),
                        upload_to="current_files/",
                        verbose_name="Current processing file",
                    ),
                ),
                (
                    "processed_file",
                    models.FileField(
                        blank=True,
                        help_text="File after processing completion",
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="media/processed_files/"
                        ),
                        upload_to="processed_files/",
                        verbose_name="Processing result file",
                    ),
                ),
                (
                    "target_columns",
                    models.JSONField(
                        default=list,
                        help_text="List of column names to process, empty list means process all columns",
                        verbose_name="Target columns",
                    ),
                ),
                (
                    "preserve_headers",
                    models.BooleanField(default=True, verbose_name="Preserve headers"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Processing status",
                    ),
                ),
                (
                    "progress",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Progress percentage from 0-100",
                        verbose_name="Progress percentage",
                    ),
                ),
                (
                    "current_step",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("parse", "Parse file"),
                            ("generate_regex", "Generate regex"),
                            ("preview", "Preview data"),
                            ("replace", "Execute replacement"),
                            ("export", "Export result"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Current step",
                    ),
                ),
                (
                    "step_message",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of current step",
                        null=True,
                        verbose_name="Step message",
                    ),
                ),
                (
                    "eta_seconds",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated time to complete remaining tasks",
                        null=True,
                        verbose_name="Estimated remaining time (seconds)",
                    ),
                ),
                (
                    "task_id",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Celery task ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Created time"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated time"),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Processing start time"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completion time"
                    ),
                ),
                (
                    "user_ip",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="User IP"
                    ),
                ),
            ],
            options={
                "verbose_name": "File processing request",
                "verbose_name_plural": "File processing requests",
                "ordering": ["-created_at"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("progress__gte", 0), ("progress__lte", 100)
                        ),
                        name="progress_range_check",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("eta_seconds__isnull", True),
                            ("eta_seconds__gte", 0),
                            _connector="OR",
                        ),
                        name="eta_seconds_positive_check",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FileMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("headers", models.JSONField(default=list, verbose_name="Header list")),
                (
                    "total_rows",
                    models.PositiveIntegerField(default=0, verbose_name="Total rows"),
                ),
                (
                    "total_columns",
                    models.PositiveIntegerField(default=0, verbose_name="Total columns"),
                ),
                (
                    "encoding",
                    models.CharField(
                        default="utf-8", max_length=20, verbose_name="File encoding"
                    ),
                ),
                (
                    "delimiter",
                    models.CharField(
                        blank=True,
                        help_text="CSV file delimiter",
                        max_length=5,
                        null=True,
                        verbose_name="Delimiter",
                    ),
                ),
                (
                    "preview_data",
                    models.JSONField(
                        default=list,
                        help_text="First 5 rows of data for preview",
                        verbose_name="Preview data",
                    ),
                ),
                (
                    "parsed_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Parsed time"
                    ),
                ),
                (
                    "request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="file_metadata",
                        to="regex_processor.fileprocessingrequest",
                        verbose_name="Associated request",
                    ),
                ),
            ],
            options={
                "verbose_name": "File metadata",
                "verbose_name_plural": "File metadata",
            },
        ),
        migrations.CreateModel(
            name="GeneratedRegex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pattern",
                    models.TextField(
                        help_text="LLM generated regex", verbose_name="Regex pattern"
                    ),
                ),
                (
                    "flags",
                    models.JSONField(
                        default=dict,
                        help_text="Regex flags such as ignorecase etc",
                        verbose_name="Regex flags",
                    ),
                ),
                (
                    "column_patterns",
                    models.JSONField(
                        default=dict,
                        help_text="Regex for different columns, format: {'column_name': 'regex'}",
                        verbose_name="Column-level regex",
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="LLM generated confidence score (0-1)",
                        null=True,
                        verbose_name="Confidence score",
                    ),
                ),
                (
                    "generation_time",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Generation time (seconds)"
                    ),
                ),
                (
                    "generated_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Generated time"
                    ),
                ),
                (
                    "request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="generated_regex",
                        to="regex_processor.fileprocessingrequest",
                        verbose_name="Associated request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Generated regex",
                "verbose_name_plural": "Generated regex",
            },
        ),
        migrations.CreateModel(
            name="ProcessingLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("debug", "Debug"),
                        ],
                        max_length=10,
                        verbose_name="Log level",
                    ),
                ),
                ("message", models.TextField(verbose_name="Log message")),
                (
                    "details",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Detailed information"
                    ),
                ),
                (
                    "row_number",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Row number"
                    ),
                ),
                (
                    "column_name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Column name"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Record time"
                    ),
                ),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processing_logs",
                        to="regex_processor.fileprocessingrequest",
                        verbose_name="Associated request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Processing log",
                "verbose_name_plural": "Processing logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProcessingResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_replacements",
                    models.PositiveIntegerField(default=0, verbose_name="Total replacements"),
                ),
                (
                    "column_replacements",
                    models.JSONField(
                        default=dict,
                        help_text="Format: {'column_name': replacement_count}",
                        verbose_name="Column replacements",
                    ),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Processing time (seconds)"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, null=True, verbose_name="Error message"),
                ),
                (
                    "error_details",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Error details"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Result generation time"
                    ),
                ),
                (
                    "request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processing_result",
                        to="regex_processor.fileprocessingrequest",
                        verbose_name="Associated request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Processing result",
                "verbose_name_plural": "Processing results",
                "ordering": ["-created_at"],
            },
        ),
    ]
